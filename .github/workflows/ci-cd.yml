name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Analyze project source
      run: flutter analyze
    
    - name: Run tests
      run: flutter test --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info

  build-android:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Create .env file
      run: |
        echo "TWELVE_DATA_API_KEY=${{ secrets.TWELVE_DATA_API_KEY }}" > .env
        echo "APP_NAME=Indian Stocks" >> .env
        echo "APP_VERSION=1.0.0" >> .env
        echo "DEBUG_MODE=false" >> .env
        echo "ENABLE_LOGGING=false" >> .env
    
    - name: Build APK
      run: flutter build apk --release --obfuscate --split-debug-info=debug_symbols
    
    - name: Build App Bundle
      run: flutter build appbundle --release --obfuscate --split-debug-info=debug_symbols
    
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: release-apk
        path: build/app/outputs/flutter-apk/app-release.apk
    
    - name: Upload App Bundle
      uses: actions/upload-artifact@v3
      with:
        name: release-aab
        path: build/app/outputs/bundle/release/app-release.aab

  build-ios:
    needs: test
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Create .env file
      run: |
        echo "TWELVE_DATA_API_KEY=${{ secrets.TWELVE_DATA_API_KEY }}" > .env
        echo "APP_NAME=Indian Stocks" >> .env
        echo "APP_VERSION=1.0.0" >> .env
        echo "DEBUG_MODE=false" >> .env
        echo "ENABLE_LOGGING=false" >> .env
    
    - name: Build iOS
      run: flutter build ios --release --no-codesign --obfuscate --split-debug-info=debug_symbols
    
    - name: Upload iOS build
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: build/ios/iphoneos/Runner.app

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Run dependency audit
      run: dart pub deps --style=compact | grep -E "(overridden|unresolved)"
      continue-on-error: true
    
    - name: Check for secrets in code
      run: |
        # Check for common secret patterns
        grep -r -i "password\|secret\|api_key\|token" --include="*.dart" lib/ || true
        # Ensure no hardcoded API keys
        grep -r "ccb56c55d594460fb390386e63d93a83" --include="*.dart" lib/ && exit 1 || true
    
    - name: License compliance check
      run: flutter pub deps --style=compact

  deploy-staging:
    needs: [test, build-android]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download APK
      uses: actions/download-artifact@v3
      with:
        name: release-apk
    
    - name: Deploy to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_APP_ID }}
        token: ${{ secrets.FIREBASE_TOKEN }}
        groups: testers
        file: app-release.apk

  deploy-production:
    needs: [test, build-android, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download App Bundle
      uses: actions/download-artifact@v3
      with:
        name: release-aab
    
    # Add your Play Store deployment step here
    # Example using fastlane or Google Play Console API
